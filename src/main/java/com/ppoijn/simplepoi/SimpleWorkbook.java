/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ppoijn.simplepoi;

import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

import static com.ppoijn.simplepoi.Util.createCellStyle;

@Slf4j
public class SimpleWorkbook implements AutoCloseable, SimpleSheetInterface {
    @Getter
    private final SXSSFWorkbook workbook;
    @Getter
    private SimpleSheet currentSheet;
    private int nextSheetNum = 0;

    @Getter
    private String errorMessage = "Excel Write Binary Fail";

    public static SimpleWorkbookBuilder.SheetNameBuilder builder() {
        return new SimpleWorkbookBuilder.SheetNameBuilder();
    }

    protected SimpleWorkbook(String sheetName, int rowAccessWindowSize, boolean isStyle, String errorMessage) {
        this(sheetName, rowAccessWindowSize, isStyle, errorMessage, null);
    }

    protected SimpleWorkbook(String sheetName, int rowAccessWindowSize, boolean isStyle, String errorMessage, List<Object> headerNames) {
        this.workbook = new SXSSFWorkbook(null, rowAccessWindowSize, true);
        insertSheet(sheetName, headerNames, isStyle);
        this.errorMessage = errorMessage;
    }

    protected SimpleWorkbook(InputStream excelFileInputStream) throws IOException {
        this.workbook = new SXSSFWorkbook(new XSSFWorkbook(excelFileInputStream));
        for (int i = 0 ; i < workbook.getNumberOfSheets() ; i++) {
            currentSheet = new SimpleSheet(workbook.getSheetAt(i));
        }
    }
    public void insertSheet(String sheetName){
        insertSheet(sheetName, null, false);
    }

    public void insertSheet(String sheetName, List<Object> headerNames){
        insertSheet(sheetName, headerNames, false);
    }

    public void insertSheet(String sheetName, List<Object> headerNames, boolean isStyle){
        if(nextSheetNum > 0) {
            currentSheet.done();
        }
        nextSheetNum += 1;
        this.currentSheet = new SimpleSheet(
                workbook.createSheet(sheetName),
                sheetName,
                headerNames,
                isStyle ? createCellStyle(this, IndexedColors.WHITE) : null
        );
    }

    public void write(OutputStream outputStream) throws IOException {
        workbook.write(outputStream);
    }

    public byte[] getByte() throws SimplePoiException {
        currentSheet.done();
        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            write(out);
            return out.toByteArray();
        } catch (IOException e) {
            throw new SimplePoiException(e, Code.ETC, e.getMessage());
        }
    }

    public byte[] nonThrowableGetByte() {
        try {
            return this.getByte();
        } catch (SimplePoiException e) {
            log.error(errorMessage, e);
            return new byte[0];
        }
    }

    @Override
    public void close() {
        currentSheet.done();
        if (workbook != null) {
            workbook.dispose();
        }
    }

    @Override
    public void insertRowList(List<List<Object>> value) {
        currentSheet.insertRowList(value);
    }

    @Override
    public void insertRow() {
        currentSheet.insertRow();
    }

    @Override
    public void insertRow(List<Object> values) {
        currentSheet.insertRow(values);
    }

    @Override
    public void insertRow(List<Object> values, CellStyle style) {
        currentSheet.insertRow(values, style);
    }

    @Override
    public void insertCellList(List<Object> values) {
        currentSheet.insertCellList(values);
    }

    @Override
    public void insertCell(Object value) {
        currentSheet.insertCell(value);
    }

    @Override
    public void insertCell(Object value, CellStyle style) {
        currentSheet.insertCell(value, style);
    }
}
